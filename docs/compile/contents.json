{
    "name": "Android SDK",
    "text": "<p>The SuperAwesome Android SDK (Software Development Kit) lets you to easily add COPPA-compliant display and video advertisements to your apps.</p>\n<p>This project is hosted on GitHub: <a href=\"https://github.com/SuperAwesomeLTD/sa-mobile-sdk-android/tree/develop_v3\">https://github.com/SuperAwesomeLTD/sa-mobile-sdk-android/tree/develop_v3</a></p>\n",
    "sections": [
        {
            "name": "Getting Started",
            "sections": [
                {
                    "name": "Registering Your App on the Dashboard",
                    "text": "<p>If you haven&#39;t already registered your app on the SuperAwesome Dashboard, you can do that by going to <a href=\"http://dashboard.superawesome.tv\">http://dashboard.superawesome.tv</a> and creating a new app.</p>\n<p><img src=\"img/dashboard.png\" alt=\"\" title=\"Registering an app on the dashboard\"></p>\n<p>Once your app is registered, you can create placements for it and use the documentation provided below to integrate these placements into your Android application.\nYou can customise your ad placements on this site and add features such as fallback placements.</p>\n<p>We also provide some demo placements that can be used for testing. These placements have a 100% fill rate.</p>\n<table>\n<thead>\n<tr>\n<th>Placement ID</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5687</td>\n<td>320x50 banner</td>\n</tr>\n<tr>\n<td>5692</td>\n<td>320x480 interstitial</td>\n</tr>\n<tr>\n<td>5740</td>\n<td>video</td>\n</tr>\n</tbody>\n</table>\n"
                },
                {
                    "name": "Adding the Library to Your Project",
                    "text": "<p>First, you have to add the library to your workspace. The easiest way to do this is to use Gradle; just include the following in your module&#39;s <code>build.gradle</code> file (usually the file under <code>MyApplication/app/</code>):</p>\n<pre><code>repositories {\n    maven {\n        url  &quot;http://dl.bintray.com/sharkofmirkwood/maven&quot;\n    }\n}\n\ndependencies {\n    compile &#39;tv.superawesome.sdk:sa-sdk:3.0.6@aar&#39;\n    compile &#39;com.google.code.gson:gson:2.4&#39;\n}\n</code></pre><p><img src=\"img/android_gradle_setup.png\" alt=\"\" title=\"Setting up SA in build.gradle\"></p>\n<p>Next, open the AndroidManifest.xml file in the root of the project. Add two &#39;Uses Permission&#39; items, named android.permission.INTERNET and android.permission.ACCESS_NETWORK_STATE, by copying the following into the root node of your manifest file:</p>\n<pre><code>&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt;\n&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;\n</code></pre><p>Last, in the Activity or Fragment you&#39;ll want to add AwesomeAds, you&#39;ll need to add:</p>\n<pre><code>SuperAwesome.getInstance().setConfigurationProduction();\nSuperAwesome.getInstance().enableTestMode();\n// or SuperAwesome.getInstance().disableTestMode() once you&#39;re running real production\n</code></pre>"
                }
            ]
        },
        {
            "name": "Video Ad Activity",
            "text": "<p>To load a video Ad into your Activity or Fragment, and then display it, add the following code:</p>\n<pre><code>SALoader.loadAd(__PLACEMENT_ID__, new SALoaderListener() {\n       @Override\n    public void didLoadAd(SAAd ad) {\n         // start the video activity\n        SAVideoActivity.start(\n            MainActivity.this,         // pass activity context\n            ad,                     // pass the loaded ad to the SAVideoActivity\n            true,                     // true - enable Parental Gate; false - disable Parental Gate\n            adListener,             // the video activity responds to three listeners, which can also be null\n            parentalGateListener, \n            videoAdListener);\n    }\n\n    @Override\n    public void didFailToLoadAdForPlacementId(int placementId) {\n            System.out.println(&quot;Placement: &quot; + placementId + &quot; could not be loaded&quot;);\n        }\n    });\n</code></pre><p>To take it step by step: </p>\n<pre><code>SALoader.loadAd(__PLACEMENT_ID__, new SALoaderListener() {\n    // implementation here\n}\n</code></pre><p>This function loads async an Ad and expects two parameters: </p>\n<ul>\n<li><strong>PLACEMENT_ID</strong>, which can be 5740 (test one) or whatever you have defined in the Dashboard</li>\n<li>an instance of the SALoaderListener interface, that defines two callbacks to let you know when an Ad has finished loading or failed to load: <code>didLoadAd</code> and <code>didFailToLoadAdForPlacementId</code>.</li>\n</ul>\n<p>Once you&#39;ve loaded the Ad, using the SAVideoActivity static function <code>start</code> you can display the video ad.\nThe <code>start</code> function takes six parameters:</p>\n<ul>\n<li>any valid Activity context</li>\n<li>an object of type <code>SAAd</code>, which usually gets returned by the callback <code>didLoadAd</code> function</li>\n<li>whether to show the Parental Gate or not</li>\n<li>an instance of the SAAdListener interface; can be null</li>\n<li>an instance of the SAParentalGateListener interface; can be null</li>\n<li><p>an instance of the SAVideoAdListener interface; can be null</p>\n<p>The three listeners will be discussed in the next section.</p>\n</li>\n</ul>\n"
        },
        {
            "name": "Video Ad Events",
            "text": "<p>The SAVideoActivity is helped by three listeners in order to notify users of events.\nIn order to use them, your activity must implement one or all of the Listeners:</p>\n<pre><code>public class MyActivity extends Activity implements SAAdListener, SAParentalGateListener, SAVideoAdListener {\n    // private listener objects\n    private SAAdListener adListener = this;\n    private SAParentalGateListener parentalGateListener = this;\n    private SAVideoAdListener videoAdListener = this;\n\n    // rest of the activity implementation\n    // ....\n}\n</code></pre><p>And in this case the activity must override all defined functions for SAAdListener:</p>\n<pre><code>    @Override\n    public void adWasShown(int placementId) {\n        System.out.println(&quot;adWasShown&quot;);\n    }\n\n    @Override\n    public void adFailedToShow(int placementId) {\n        System.out.println(&quot;adFailedToShow&quot;);\n    }\n\n    @Override\n    public void adWasClosed(int placementId) {\n        System.out.println(&quot;adWasClosed&quot;);\n    }\n\n    @Override\n    public void adWasClicked(int placementId) {\n        System.out.println(&quot;adWasClicked&quot;);\n    }\n\n    @Override\n    public void adHasIncorrectPlacement(int placementId) {\n        System.out.println(&quot;adHasIncorrectPlacement&quot;);\n    }\n</code></pre><p>And for SAParentalGateListener</p>\n<pre><code>@Override\n    public void parentalGateWasCanceled(int placementId) {\n        System.out.println(&quot;parentalGateWasCanceled&quot;);\n    }\n\n    @Override\n    public void parentalGateWasFailed(int placementId) {\n        System.out.println(&quot;parentalGateWasFailed&quot;);\n    }\n\n    @Override\n    public void parentalGateWasSucceded(int placementId) {\n        System.out.println(&quot;parentalGateWasSucceded&quot;);\n    }\n</code></pre><p>And for SAVideoAdListener</p>\n<pre><code>@Override\n    public void adStarted(int placementId) {\n        System.out.println(&quot;adStarted&quot;);\n    }\n\n    @Override\n    public void videoStarted(int placementId) {\n        System.out.println(&quot;videoStarted&quot;);\n    }\n\n    @Override\n    public void videoReachedFirstQuartile(int placementId) {\n        System.out.println(&quot;videoReachedFirstQuartile&quot;);\n    }\n\n    @Override\n    public void videoReachedMidpoint(int placementId) {\n        System.out.println(&quot;videoReachedMidpoint&quot;);\n    }\n\n    @Override\n    public void videoReachedThirdQuartile(int placementId) {\n        System.out.println(&quot;videoReachedThirdQuartile&quot;);\n    }\n\n    @Override\n    public void videoEnded(int placementId) {\n        System.out.println(&quot;videoEnded&quot;);\n    }\n\n    @Override\n    public void adEnded(int placementId) {\n        System.out.println(&quot;adEnded&quot;);\n    }\n\n    @Override\n    public void allAdsEnded(int placementId) {\n        System.out.println(&quot;allAdsEnded&quot;);\n    }\n</code></pre>"
        },
        {
            "name": "Parental Gate",
            "text": "<p>Parental gates are used in apps targeted towards kids to prevent them from engaging in commerce or following links out of an app to websites, social networks, or other apps without the knowledge of their parent or guardian. A parental gate presents an adult level task which must be completed in order to continue.</p>\n<p>To enable the parental gate, set to &quot;true&quot; the third parameter in the SAVideoActivity.show function:</p>\n<pre><code>SAVideoActivity.start(MainActivity.this, ad, true, adListener, parentalGateListener, videoAdListener);\n</code></pre><p><img src=\"img/parental_gate.png\" alt=\"\" title=\"Parental Gate on Android\"></p>\n"
        },
        {
            "name": "MoPub Integration",
            "text": "<p>If you already have MoPub ads serving in your app, but want to integrate SuperAwesome as well, without having to directly use the AwesomeAds SDK, you can follow the steps below:</p>\n<h4 id=\"integrate-the-sdk\">Integrate the SDK</h4>\n<p>The first thing you should do is integrate the SDK in your current app by following the instructions in <a href=\"https://developers.superawesome.tv/docs/androidsdk/Getting%20Started/Adding%20the%20Library%20to%20Your%20Project?version=3\">Getting Started / Adding the Library to Your Project</a>.</p>\n<p>This will add the SDK to your current project. </p>\n<h4 id=\"download-adapters\">Download Adapters</h4>\n<p>Next, you&#39;ll need to download a files called Adapter:</p>\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/SuperAwesomeLTD/sa-mobile-sdk-android/develop_v3/superawesomesdk/sa-sdk/mopub/SuperAwesomeRewardedVideoCustomEvent.java\">SuperAwesomeRewardedVideoCustomEvent.java</a></li>\n</ul>\n<p>These will act as a convenient bridge between SuperAwesome and MoPub, so that you don&#39;t have to write any aditional line of code.\nYou&#39;ll also need to place them in your project. To do this, in your <code>/app/src/main/java/com</code> folder, create a folder called <code>mopub</code> and inside it another one called <code>mobileads</code>. Here copy the file.</p>\n<h4 id=\"setup-a-mopub-custom-network\">Setup a MoPub Custom Network</h4>\n<p>From your MoPub admin interface you should create a <code>New Network</code></p>\n<p><img src=\"img/IMG_07_MoPub_1.png\" alt=\"\" title=\"Adding a new Network\"></p>\n<p>Form the next menu, select <code>Custom Native Network</code></p>\n<p><img src=\"img/IMG_07_MoPub_2.png\" alt=\"\" title=\"Creating a Custom Native Network\"></p>\n<p>You&#39;ll be taken to a new page. Here select the title of the new network</p>\n<p><img src=\"img/IMG_07_MoPub_3.png\" alt=\"\" title=\"Create the Super Awesome Network\"></p>\n<p>And assign custom inventory details for Banner and Interstitial ads:</p>\n<p><img src=\"img/IMG_07_MoPub_4.png\" alt=\"\" title=\"Setup custom inventory\"></p>\n<p>Custom Event Class is:</p>\n<ul>\n<li>for Rewarded Video Ads: <code>com.mopub.mobileads.SuperAwesomeRewardedVideoCustomEvent</code></li>\n</ul>\n<p>Notice these are identical to the name of the file you downloaded in step one.</p>\n<p>Custom Event Data is always required, and must be given in the form of  JSON:</p>\n<pre><code>{\n    &quot;placementId&quot;: 5692,\n    &quot;testMode&quot;: true,\n    &quot;parentalGateEnabled&quot;: true\n}\n</code></pre><p>If you don&#39;t yet have a Placement ID for Awesome Ads, check out the <a href=\"https://developers.superawesome.tv/docs/androidsdk/Getting%20Started/Registering%20Your%20App%20on%20the%20Dashboard?version=3\">Getting Started / Registering Your App on the Dashboard</a> section.</p>\n"
        },
        {
            "name": "Support",
            "text": "<p>If you have any questions or you need technical support, please, do not hesitate to contact us at <a href=\"mailto:devsupport@superawesome.tv\">devsupport@superawesome.tv</a>. We will make every attempt to answer your inquiry as quickly as possible.</p>\n"
        },
        {
            "name": "License",
            "text": "<p>See the LICENSE.txt file for more information.</p>\n"
        }
    ]
}