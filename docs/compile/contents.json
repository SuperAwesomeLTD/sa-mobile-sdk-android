{
    "name": "Android SDK",
    "text": "<p>The SuperAwesome Android SDK (Software Development Kit) lets you to easily add COPPA-compliant display and video advertisements to your apps.</p>\n<p>This project is hosted on GitHub: <a href=\"https://github.com/SuperAwesomeLTD/sa-mobile-sdk-android/tree/develop_v3\">https://github.com/SuperAwesomeLTD/sa-mobile-sdk-android/tree/develop_v3</a></p>\n",
    "sections": [
        {
            "name": "Getting Started",
            "sections": [
                {
                    "name": "Registering Your App on the Dashboard",
                    "text": "<p>If you haven&#39;t already registered your app on the SuperAwesome Dashboard, you can do that by going to <a href=\"http://dashboard.superawesome.tv\">http://dashboard.superawesome.tv</a> and creating a new app.</p>\n<p><img src=\"img/dashboard.png\" alt=\"\" title=\"Registering an app on the dashboard\"></p>\n<p>Once your app is registered, you can create placements for it and use the documentation provided below to integrate these placements into your Android application.\nYou can customise your ad placements on this site and add features such as fallback placements.</p>\n<p>We also provide some demo placements that can be used for testing. These placements have a 100% fill rate.</p>\n<table>\n<thead>\n<tr>\n<th>Placement ID</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5687</td>\n<td>320x50 banner</td>\n</tr>\n<tr>\n<td>5692</td>\n<td>320x480 interstitial</td>\n</tr>\n<tr>\n<td>5740</td>\n<td>video</td>\n</tr>\n</tbody>\n</table>\n"
                },
                {
                    "name": "Adding the Library to Your Project - AAR Library",
                    "text": "<p>The simplest way of installing the AwesomeAds SDK in Android Studio is to download the AAR library through Gradle.</p>\n<p>Just include the following in your module&#39;s <code>build.gradle</code> file (usually the file under <code>MyApplication/app/</code>):</p>\n<pre><code>repositories {\n    maven {\n        url  &quot;http://dl.bintray.com/sharkofmirkwood/maven&quot;\n    }\n}\n\ndependencies {\n    compile &#39;tv.superawesome.sdk:sa-sdk:3.1.1@aar&#39;\n    compile &#39;com.google.code.gson:gson:2.4&#39;\n}\n</code></pre><p><img src=\"img/android_gradle_setup.png\" alt=\"\" title=\"Setting up SA in build.gradle\"></p>\n"
                },
                {
                    "name": "Adding the Library to Your Project - JAR Library",
                    "text": "<p>If you&#39;re running an environment which does not support Gradle, then you&#39;ll need to add the SDK manually.</p>\n<p>First, download two .jar files:</p>\n<ul>\n<li><a href=\"https://github.com/SuperAwesomeLTD/sa-mobile-sdk-android/blob/develop_v3/docs/res/gson-2.4.jar?raw=true\">gson-2.4.jar</a></li>\n<li><a href=\"https://github.com/SuperAwesomeLTD/sa-mobile-sdk-android/blob/develop_v3/docs/res/sa-sdk-3.1.4.jar?raw=true\">sa-sdk-3.1.4.jar</a> </li>\n</ul>\n<p>You&#39;ll need to add these two to your project&#39;s <code>lib</code> folder, usually <code>MyApplication/app/libs</code>. The <code>libs</code> folder should be located on the same level as the <code>src</code> and <code>build</code> folders.</p>\n<p>Once they&#39;re there, in Android Studion you&#39;ll need to select each one, right-click and click on <code>Add as Library</code>.</p>\n<p>Secondly, you&#39;ll need to add the following items in you Manifest file, under the Application tag:</p>\n<pre><code>&lt;!-- Awesome Ads custom Manifest part --&gt;\n&lt;activity android:name=&quot;tv.superawesome.sdk.views.SAVideoActivity&quot; android:label=&quot;SAVideoActivity&quot;&gt;&lt;/activity&gt;\n&lt;activity android:name=&quot;tv.superawesome.sdk.views.SAInterstitialActivity&quot; android:label=&quot;SAInterstitialActivity&quot;&gt;&lt;/activity&gt;\n&lt;service android:name=&quot;tv.superawesome.lib.sanetwork.SAGet&quot; android:exported=&quot;false&quot; /&gt;\n</code></pre><p><img src=\"img/manifest.png\" alt=\"\" title=\"The new manifest structure\"></p>\n<p>This will register two new activities and one service for your application, all needed by the SDK.</p>\n<p>Finally, the sa-sdk-3.1.4.jar library will depend on some external resources, such as assets, layouts, etc, to correctly display Ads.</p>\n<p>Download<a href=\"https://github.com/SuperAwesomeLTD/sa-mobile-sdk-android/blob/develop_v3/docs/res/sa-sdk-res.zip?raw=true\">sa-sdk-res.zip</a></p>\n<p>and unzip it. You&#39;ll find three folders inside:</p>\n<ul>\n<li>layout - containing a buch of XML files; copy the XML files inside your projects&#39; layout folder</li>\n<li>drawable - containing a bunch of PNG files; copy the PNG files inside your projects&#39; drawable folder</li>\n<li>assets - containing a folder named html; copy the whole folder inside your projects&#39; assets folder.</li>\n</ul>\n<p>In the end you should have the following folder structure (or something similar):</p>\n<p><img src=\"img/resources.png\" alt=\"\" title=\"The new folder structure\"> </p>\n"
                },
                {
                    "name": "Final setup",
                    "text": "<p>Once the SDK is added to your project (either through Gradle or as a .JAR + Resource files) you&#39;ll need to do some final setting up:</p>\n<p>Open the AndroidManifest.xml file in the root of the project. Add two &#39;Uses Permission&#39; items, named android.permission.INTERNET and android.permission.ACCESS_NETWORK_STATE, by copying the following into the root node of your manifest file:</p>\n<pre><code>&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt;\n&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;\n</code></pre><p>Last, in the Activity or Fragment you&#39;ll want to add display an ad, you&#39;ll need to add:</p>\n<pre><code>SuperAwesome.getInstance().setApplicationContext(getApplicationContext());\nSuperAwesome.getInstance().setConfigurationProduction();\nSuperAwesome.getInstance().enableTestMode();\n// or SuperAwesome.getInstance().disableTestMode() once you&#39;re running real production\n</code></pre><p>Congratulations, you&#39;ve setup AwesomeAds SDK for Android.</p>\n"
                }
            ]
        },
        {
            "name": "Loading Ads",
            "text": "<p>In AwesomeAds displaying Ads is always a two-step process: First load the ad, then render it. \nIn this chapter we&#39;re going to discuss the first step, how to load an Ad.</p>\n<p>All ads are loaded exactly the same (whether they are banner, interstitial or video type ads): by calling the <code>SALoader.loadAd()</code> function.</p>\n<p>The syntax for such a call is as follows:</p>\n<pre><code>SALoader.loadAd(__PLACEMENT_ID__, new SALoaderListener() {\n       @Override\n    public void didLoadAd(SAAd ad) {\n        // print the ad details\n         ad.print();\n    }\n\n    @Override\n    public void didFailToLoadAdForPlacementId(int placementId) {\n        System.out.println(&quot;Placement: &quot; + placementId + &quot; could not be loaded&quot;);\n    }\n});\n</code></pre><p>The loadAd() function has two parameters:</p>\n<ul>\n<li>the <strong>PLACEMENT_ID</strong>, which is the integer ID of your placement. You can use one of the test ones or your own, once you set it up on the Dashboard.</li>\n<li>a new instance of the SALoaderListener Java interface, which must always implement two functions: <code>didLoadAd()</code> and <code>didFailToLoadAdForPlacementId()</code>.</li>\n</ul>\n<p>The <code>didLoadAd(SAAd ad)</code> function acts as a callback letting you know that an ad has been successfully loaded. You can then use the <code>ad</code> object passed as parameter to print ad details, pass it further down to be rendered, etc.\nDisplaying ads should be done only from this function, since it&#39;s the safest point to assume an ad has been loaded.</p>\n<p>The <code>didFailToLoadAdForPlacementId(int placementId)</code> function acts as a callback letting you know that an ad has failed to load. \nThe <code>placementId</code> parameter lets you know what placement has failed to deliver an ad. Please note that failure can mean anything from there&#39;s no ad available on the server to there&#39;s no internet connection.</p>\n"
        },
        {
            "name": "Displaying Banner Ads",
            "text": "<p>Once you&#39;ve loaded the Banner ad, you can display it.</p>\n<p>To do so, you&#39;ll first need to declare a SABannerAd view in your activity or fragment&#39;s XML file:</p>\n<pre><code>&lt;tv.superawesome.sdk.views.SABannerAd\n    android:id=&quot;@+id/myBannerAd1&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;500px&quot; /&gt;\n</code></pre><p>Then, in your activity code:</p>\n<pre><code>SALoader.loadAd(__BANNER_PLACEMENT_ID__, new SALoaderListener() {\n       @Override\n    public void didLoadAd(SAAd ad) {\n        // find the Banner\n         SABannerAd myBanner = (SABannerAd) findViewById(R.id.myBannerAd1);\n\n         // set it&#39;s Ad object\n        myBanner.setAd(ad);\n\n        // start playing the banner\n        myBanner.play();\n    }\n\n    @Override\n    public void didFailToLoadAdForPlacementId(int placementId) {\n        System.out.println(&quot;Placement: &quot; + placementId + &quot; could not be loaded&quot;);\n    }\n});\n</code></pre>"
        },
        {
            "name": "Displaying Interstitial Ads",
            "text": "<p>Once you&#39;ve loaded the interstitial Ad, you can display it. In the Awesome Ads SDK, Interstitial Ads are subclasses of the Activity class, and are displayed much the same way an Activity would be.</p>\n<pre><code>SALoader.loadAd(__INTERSTITIAL_PLACEMENT_ID__, new SALoaderListener() {\n       @Override\n    public void didLoadAd(SAAd ad) {\n         // start the interstitial activity\n        SAInterstitialActivity.start(MainActivity.this, ad, true, null, null);\n    }\n\n    @Override\n    public void didFailToLoadAdForPlacementId(int placementId) {\n        System.out.println(&quot;Placement: &quot; + placementId + &quot; could not be loaded&quot;);\n    }\n});\n</code></pre><p>Calling the SAInterstitialActivity static function <code>start</code> will display the interstitial ad.\nThe <code>start</code> function takes five parameters:</p>\n<ul>\n<li>any valid Activity context</li>\n<li>an object of type <code>SAAd</code>, which usually gets returned by the callback <code>didLoadAd</code> function</li>\n<li>whether to show the Parental Gate or not</li>\n<li>an instance of the SAAdListener interface; can be null</li>\n<li>an instance of the SAParentalGateListener interface; can be null</li>\n</ul>\n<p>The listeners will be discussed in a future section.</p>\n"
        },
        {
            "name": "Displaying Video Ads",
            "text": "<p>Once you&#39;ve loaded the video Ad, you can display it. In the Android SDK Video Ads are fullscreen, and are displayed in much the same way as an Activity would be.</p>\n<pre><code>SALoader.loadAd(__VIDEO_PLACEMENT_ID__, new SALoaderListener() {\n       @Override\n    public void didLoadAd(SAAd ad) {\n         // start the video activity\n        SAVideoActivity.start(MainActivity.this, ad, true, null, null, null);\n    }\n\n    @Override\n    public void didFailToLoadAdForPlacementId(int placementId) {\n        System.out.println(&quot;Placement: &quot; + placementId + &quot; could not be loaded&quot;);\n    }\n});\n</code></pre><p>Calling the SAVideoActivity static function <code>start</code> will display the video ad.\nThe <code>start</code> function takes six parameters:</p>\n<ul>\n<li>any valid Activity context</li>\n<li>an object of type <code>SAAd</code>, which usually gets returned by the callback <code>didLoadAd</code> function</li>\n<li>whether to show the Parental Gate or not</li>\n<li>an instance of the SAAdListener interface; can be null</li>\n<li>an instance of the SAParentalGateListener interface; can be null</li>\n<li>an instance of the SAVideoAdListener interface; can be null</li>\n</ul>\n<p>The listeners will be discussed in a future section.</p>\n"
        },
        {
            "name": "Ad Events",
            "text": "<p>Banner Ads, Video Ads and Interstitial can be helped by up to three listeners in order to notify you of ad lifecycle events.\nIn order to use them, your activity must implement one or all of the Listeners:</p>\n<pre><code>public class MyActivity extends Activity implements SAAdListener, SAParentalGateListener, SAVideoAdListener {\n\n    // private listener objects - assign the current Activity instance to them, since it promises to\n    // implement their Interfaces\n    private SAAdListener adListener = this;\n    private SAParentalGateListener parentalGateListener = this;\n    private SAVideoAdListener videoAdListener = this;\n\n    // rest of the activity implementation\n    // ....\n}\n</code></pre><p>Once <code>MyActivity</code> declares that it implements the Listener interfaces, it must also implement all functions from\n<code>SAAdListener</code>:</p>\n<pre><code>public void adWasShown(int placementId);\npublic void adFailedToShow(int placementId);\npublic void adWasClosed(int placementId);\npublic void adWasClicked(int placementId);\npublic void adHasIncorrectPlacement(int placementId);\n</code></pre><p>And for <code>SAParentalGateListener</code>:</p>\n<pre><code>public void parentalGateWasCanceled(int placementId);\npublic void parentalGateWasFailed(int placementId);\npublic void parentalGateWasSucceded(int placementId);\n</code></pre><p>And for <code>SAVideoAdListener</code>:</p>\n<pre><code>public void adStarted(int placementId);\npublic void videoStarted(int placementId);\npublic void videoReachedFirstQuartile(int placementId);\npublic void videoReachedMidpoint(int placementId);\npublic void videoReachedThirdQuartile(int placementId);\npublic void videoEnded(int placementId);\npublic void adEnded(int placementId);\npublic void allAdsEnded(int placementId);\n</code></pre><p>To assign a listener to a Banner ad, you&#39;ll need to:</p>\n<pre><code>// standard banner creation from XML\nSABannerAd myBanner = (SABannerAd) findViewById(R.id.myBannerAd1);\n\n// also assign the listeners\nmyBanner.setAdListener(adListener);\nmyBanner.setParentalGateListener(parentalGateListener);\n\n// set the ad object and play the Ad\nmyBanner.setAd(ad);\nmyBanner.play();\n</code></pre><p>To assign listeners to an Interstitial ad, you&#39;ll need to change its <code>start()</code> function call to:</p>\n<pre><code>SAInterstitialActivity.start(MainActivity.this, ad, true, adListener, parentalGateListener);\n</code></pre><p>To assign listeners to a Video ad, you&#39;ll need to change its <code>start()</code> function call to:</p>\n<pre><code>SAVideoActivity.start(MainActivity.this, ad, true, adListener, parentalGateListener, videoAdListener);\n</code></pre>"
        },
        {
            "name": "Parental Gate",
            "text": "<p>Parental gates are used in apps targeted towards kids to prevent them from engaging in commerce or following links out of an app to websites, social networks, or other apps without the knowledge of their parent or guardian. A parental gate presents an adult level task which must be completed in order to continue.</p>\n<p>For Banner ads:</p>\n<pre><code>myBanner.setIsParentalGateEnabled(true);\n</code></pre><p>For Interstitial ads, set to &quot;true&quot; the third parameter of the <code>SAInterstitialActivity.start()</code> function:</p>\n<pre><code>SAInterstitialActivity.start(MainActivity.this, ad, true, adListener, parentalGateListener);\n</code></pre><p>For Video ads, set to &quot;true&quot; the third parameter of the <code>SAVideoActivity.start()</code> function:</p>\n<pre><code>SAVideoActivity.start(MainActivity.this, ad, true, adListener, parentalGateListener, videoAdListener);\n</code></pre><p><img src=\"img/parental_gate.png\" alt=\"\" title=\"Parental Gate on Android\"></p>\n"
        },
        {
            "name": "MoPub Integration",
            "text": "<p>If you already have MoPub ads serving in your app, but want to integrate SuperAwesome as well, without having to directly use the AwesomeAds SDK, you can follow the steps below:</p>\n<h4 id=\"integrate-the-sdk\">Integrate the SDK</h4>\n<p>The first thing you should do is integrate the SDK in your current app by following the instructions in <a href=\"https://developers.superawesome.tv/docs/androidsdk/Getting%20Started/Adding%20the%20Library%20to%20Your%20Project?version=3\">Getting Started / Adding the Library to Your Project</a>.</p>\n<p>This will add the SDK to your current project. </p>\n<h4 id=\"download-adapters\">Download Adapters</h4>\n<p>Next, you&#39;ll need to download three .java files called Adapters:</p>\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/SuperAwesomeLTD/sa-mobile-sdk-android/develop_v3/superawesomesdk/sa-sdk/mopub/SuperAwesomeBannerCustomEvent.java\">SuperAwesomeBannerCustomEvent.java</a></li>\n<li><a href=\"https://raw.githubusercontent.com/SuperAwesomeLTD/sa-mobile-sdk-android/develop_v3/superawesomesdk/sa-sdk/mopub/SuperAwesomeInterstitialCustomEvent.java\">SuperAwesomeInterstitialCustomEvent.java</a></li>\n<li><a href=\"https://raw.githubusercontent.com/SuperAwesomeLTD/sa-mobile-sdk-android/develop_v3/superawesomesdk/sa-sdk/mopub/SuperAwesomeRewardedVideoCustomEvent.java\">SuperAwesomeRewardedVideoCustomEvent.java</a></li>\n</ul>\n<p>These will act as a convenient bridge between SuperAwesome and MoPub, so that you don&#39;t have to write any aditional line of code.\nYou&#39;ll also need to place them in your project. To do this, in your <code>/app/src/main/java/com</code> folder, create a folder called <code>mopub</code> and inside it another one called <code>mobileads</code>. Here copy the files.</p>\n<h4 id=\"setup-a-mopub-custom-network\">Setup a MoPub Custom Network</h4>\n<p>From your MoPub admin interface you should create a <code>New Network</code></p>\n<p><img src=\"img/IMG_07_MoPub_1.png\" alt=\"\" title=\"Adding a new Network\"></p>\n<p>Form the next menu, select <code>Custom Native Network</code></p>\n<p><img src=\"img/IMG_07_MoPub_2.png\" alt=\"\" title=\"Creating a Custom Native Network\"></p>\n<p>You&#39;ll be taken to a new page. Here select the title of the new network</p>\n<p><img src=\"img/IMG_07_MoPub_3.png\" alt=\"\" title=\"Create the Super Awesome Network\"></p>\n<p>And assign custom inventory details for Banner and Interstitial ads:</p>\n<p><img src=\"img/IMG_07_MoPub_5.png\" alt=\"\" title=\"Setup custom inventory\">\n<img src=\"img/IMG_07_MoPub_4.png\" alt=\"\" title=\"Setup custom inventory\"></p>\n<p>Custom Event Class is:</p>\n<ul>\n<li>for Banner Ads: <code>com.mopub.mobileads.SuperAwesomeBannerCustomEvent</code></li>\n<li>for Interstitial Ads: <code>com.mopub.mobileads.SuperAwesomeInterstitialCustomEvent</code></li>\n<li>for Rewarded Video Ads: <code>com.mopub.mobileads.SuperAwesomeRewardedVideoCustomEvent</code></li>\n</ul>\n<p>Notice these are identical to the name of the files you downloaded in step one.</p>\n<p>Custom Event Data is always required, and must be given in the form of  JSON:</p>\n<pre><code>{\n    &quot;placementId&quot;: 5692,\n    &quot;testMode&quot;: true,\n    &quot;parentalGateEnabled&quot;: true\n}\n</code></pre><p>If you don&#39;t yet have a Placement ID for Awesome Ads, check out the <a href=\"https://developers.superawesome.tv/docs/androidsdk/Getting%20Started/Registering%20Your%20App%20on%20the%20Dashboard?version=3\">Getting Started / Registering Your App on the Dashboard</a> section.</p>\n"
        },
        {
            "name": "Support",
            "text": "<p>If you have any questions or you need technical support, please, do not hesitate to contact us at <a href=\"mailto:devsupport@superawesome.tv\">devsupport@superawesome.tv</a>. We will make every attempt to answer your inquiry as quickly as possible.</p>\n"
        },
        {
            "name": "License",
            "text": "<p>See the LICENSE.txt file for more information.</p>\n"
        }
    ]
}