{
    "name": "Android SDK",
    "text": "<p>The SuperAwesome Android SDK (Software Development Kit) lets you to easily add COPPA-compliant display and video advertisements to your apps.</p>\n<p>This project is hosted on GitHub: <a href=\"https://github.com/SuperAwesomeLTD/sa-mobile-sdk-android\">https://github.com/SuperAwesomeLTD/sa-mobile-sdk-android</a></p>\n",
    "sections": [
        {
            "name": "Getting Started",
            "sections": [
                {
                    "name": "Registering Your App on the Dashboard",
                    "text": "<p>If you haven&#39;t already registered your app on the SuperAwesome Dashboard, you can do that by going to <a href=\"http://dashboard.superawesome.tv\">http://dashboard.superawesome.tv</a> and creating a new app.</p>\n<p><img src=\"img/dashboard.png\" alt=\"\" title=\"Registering an app on the dashboard\"></p>\n<p>Once your app is registered, you can create placements for it and use the documentation provided below to integrate these placements into your Android application.\nYou can customise your ad placements on this site and add features such as fallback placements.</p>\n"
                },
                {
                    "name": "Adding the Library to Your Project",
                    "text": "<p>First, you have to add the library to your workspace. The easiest way to do this is to use Gradle; just include the following in your module&#39;s <code>build.gradle</code> file (usually the file under <code>MyApplication/app/</code>):</p>\n<pre><code>repositories {\n    maven {\n        url  &quot;http://dl.bintray.com/sharkofmirkwood/maven&quot;\n    }\n}\n\ndependencies {\n    compile &#39;tv.superawesome.sdk:sa-sdk:2.1.5@aar&#39;\n    compile &#39;tv.superawesome.sdk:bee7androidsdkgamewall:2.1.5@aar&#39;\n}\n</code></pre><p><img src=\"img/android_gradle_setup.png\" alt=\"\" title=\"Setting up SA in build.gradle\"></p>\n<p>Next, open the AndroidManifest.xml file in the root of the project. Add two &#39;Uses Permission&#39; items, named android.permission.INTERNET and android.permission.ACCESS_NETWORK_STATE, by copying the following into the root node of your manifest file:</p>\n<pre><code>&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt;\n&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;\n</code></pre>"
                }
            ]
        },
        {
            "name": "Banner Ads",
            "sections": [
                {
                    "name": "Banner Ads As Resources",
                    "text": "<p>Declare the banner fragment in the layout XML:</p>\n<pre><code>&lt;fragment\n    android:name=&quot;tv.superawesome.sdk.fragments.SABannerFragment&quot;\n    android:id=&quot;@+id/sa_banner&quot;\n    android:layout_width=&quot;wrap_content&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:layout_alignParentBottom=&quot;true&quot;\n    android:layout_centerHorizontal=&quot;true&quot;\n    custom:placementID=&quot;__PLACEMENT_ID__&quot;\n    custom:testMode=&quot;true&quot; /&gt;\n</code></pre><p>Do not forget to replace <code>__PLACEMENT_ID__</code> with you own.\n&#39;testMode&#39; will make your placements show demo ads for as long as the parameter is set to &#39;true&#39;; this is recommended for while you are testing.</p>\n<p>The &#39;custom&#39; namespace is defined in XML by the following attribute:</p>\n<pre><code>xmlns:custom=&quot;http://schemas.android.com/apk/res-auto&quot;\n</code></pre><p>If you want to access the banner view in the Activity, you can do so this way:</p>\n<pre><code>SABannerFragment banner = (SABannerFragment)getSupportFragmentManager().findFragmentById(R.id.sa_banner);\n</code></pre><p>The dimensions of the banner will be the same as your selected size when you created the placement in the Dashboard.</p>\n"
                },
                {
                    "name": "Advanced Configuration",
                    "text": "<p>If you want to be notified of various events in the banner lifecycle, you can set its listener to an object instance that implements the SAPlacementListener interface.</p>\n<p>The following methods are available in the interface:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onAdLoaded(ad)</td>\n<td>This method is called when the ad is loaded and is ready to display.</td>\n</tr>\n<tr>\n<td>onAdError()</td>\n<td>This method is called when an ad download failed or could not be shown for some reason. This is likely to happen because of networking reasons or other server communication reasons.</td>\n</tr>\n</tbody>\n</table>\n<p>Example implementation:</p>\n<pre><code>banner.setListener(new SAPlacementListener() {\n    @Override\n    public void onAdLoaded(SAAd superAwesomeAd) {\n    }\n    @Override\n    public void onAdError(String message) {\n    }\n});\n</code></pre>"
                }
            ]
        },
        {
            "name": "Interstitial Ads",
            "sections": [
                {
                    "name": "Interstitial Ads As Resources",
                    "text": "<p>Declare the InterstitialView in the layout XML:</p>\n<pre><code>&lt;fragment\n    android:name=&quot;tv.superawesome.sdk.fragments.SAInterstitialFragment&quot;\n    android:id=&quot;@+id/sa_interstitial&quot;\n    android:layout_width=&quot;wrap_content&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    custom:placementID=&quot;__PLACEMENT_ID__&quot;\n    custom:testMode=&quot;true&quot;\n    custom:showInstantly=&quot;true&quot; /&gt;\n</code></pre><p>Do not forget to replace <code>__PLACEMENT_ID__</code> with you own.\n&#39;testMode&#39; will make your placements show demo ads for as long as the parameter is set to &#39;true&#39;; this is recommended for while you are testing.\nIf &#39;showInstantly&#39; is set, the ad will open as soon as it has been loaded. Otherwise you can call the interstitial&#39;s &#39;show&#39; method whener you want it to be shown.</p>\n<p>The &#39;custom&#39; namespace is defined in XML by the following attribute:</p>\n<pre><code>xmlns:custom=&quot;http://schemas.android.com/apk/res-auto&quot;\n</code></pre><p>To present the interstitial ad you have to call the <code>present</code> method:</p>\n<pre><code>SAInterstitialFragment interstitial = (SAInterstitialFragment)getSupportFragmentManager().findFragmentById(R.id.sa_interstitial);\n</code></pre><p>The dimensions of the interstitial will be the same as your selected size when you created the placement in the Dashboard.</p>\n"
                },
                {
                    "name": "Advanced Configuration",
                    "text": "<p>If you want to be notified of various events in the banner lifecycle, you can set its listener to an object instance that implements the SAPlacementListener interface.</p>\n<p>The following methods are available in the interface:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onAdLoaded(ad)</td>\n<td>This method is called when the ad is loaded and is ready to display.</td>\n</tr>\n<tr>\n<td>onAdError()</td>\n<td>This method is called when an ad download failed or could not be shown for some reason. This is likely to happen because of networking reasons or other server communication reasons.</td>\n</tr>\n</tbody>\n</table>\n<p>Example implementation:</p>\n<pre><code>interstitial.setListener(new SAPlacementListener() {\n    @Override\n    public void onAdLoaded(SAAd superAwesomeAd) {\n    }\n    @Override\n    public void onAdError(String message) {\n    }\n});\n</code></pre><p>More events will be available soon.</p>\n"
                }
            ]
        },
        {
            "name": "Video Ads",
            "sections": [
                {
                    "name": "How to Use Video Ads",
                    "text": "<p>The video ads require Google Play Services. You can find more information about setting up Google Play Services <a href=\"http://developer.android.com/google/play-services/setup.html\">here</a>.</p>\n<p>In order to use video ads in your app, first you have to add a preroll placement on the dashboard site. Then, add a SAVideoFragment instance to your view.</p>\n<p>Declare the banner fragment in the layout XML:</p>\n<pre><code>&lt;fragment android:name=&quot;tv.superawesome.sdk.fragments.SAVideoFragment&quot;\n            android:id=&quot;@+id/sa_video_ad&quot;\n            android:layout_width=&quot;fill_parent&quot;\n            android:layout_height=&quot;fill_parent&quot;\n            custom:placementID=&quot;__PLACEMENT_ID__&quot;\n            custom:testMode=&quot;true&quot;\n            custom:playInstantly=&quot;true&quot; /&gt;\n</code></pre><p>Again, do not forget to replace <code>__PLACEMENT_ID__</code> with you own.</p>\n<p>Once the ad has been loaded it will show the fragment with the video. If &#39;playInstantly&#39; is true, it will play automatically; otherwise the user will see a play button which will start the video ad when pressed. By implementing the VideoViewListener interface your app can react to events that are emitted by the SAVideoFragment instance:</p>\n<pre><code>this.videoAd = (SAVideoFragment)getSupportFragmentManager().findFragmentById(R.id.sa_video_ad);\nthis.videoAd.setListener(new SAVideoViewListener() {\n    @Override\n    public void onAdStart() {\n    }\n\n    @Override\n    public void onAdPause() {\n    }\n\n    @Override\n    public void onAdResume() {\n    }\n\n    @Override\n    public void onAdFirstQuartile() {\n    }\n\n    @Override\n    public void onAdMidpoint() {\n    }\n\n    @Override\n    public void onAdThirdQuartile() {\n    }\n\n    @Override\n    public void onAdComplete() {\n    }\n\n    @Override\n    public void onAdClosed() {\n    }\n\n    @Override\n    public void onAdSkipped() {\n    }\n\n    @Override\n    public void onAdLoaded(SAAd superAwesomeAd) {\n    }\n\n    @Override\n    public void onAdError(String message) {\n    }\n});\n</code></pre>"
                },
                {
                    "name": "Fullscreen Video Ads",
                    "text": "<p>If you just want to display a fullscreen video ad and not to worry about the listener interface, this is the easiest way to show a video ad.</p>\n<p>Use the following code within an activity to display the fullscreen video ad:</p>\n<pre><code>SAVideoActivity.start(MainActivity.this, &quot;__PLACEMENT_ID__&quot;);\n</code></pre>"
                }
            ]
        },
        {
            "name": "Gamewall",
            "sections": [
                {
                    "name": "Introduction",
                    "text": "<p>The gamewall allows a publisher to make additional revenue from users installing and engaging with third-party apps. These apps reward the user with virtual currency for the app they were directed from, thus increasing retention for the publisher as well as providing revenue.\nBecause of the way these rewards work, it is essential that your app has a virtual currency of some form that the user can be rewarded with.</p>\n<p>Currently we can only provide gamewalls for Android apps, though iOS will soon be supported too.</p>\n"
                },
                {
                    "name": "Placement Creation",
                    "text": "<p>As with any other format, to include a gamewall in your app you must first create the placement in the <a href=\"https://dashboard.superawesome.tv/\">Dashboard</a>. In the &#39;New Placement&#39; options, select the Gamewall format under the Mobile category, and you will be presented with this form:</p>\n<p><img src=\"img/gamewall_form.png\" alt=\"\" title=\"Form for adding a gamewall placement\"></p>\n<p>After adding the gamewall placement, you can get your placement ID in the same way as any other placement:</p>\n<p><img src=\"img/gamewall_placement_id.png\" alt=\"\" title=\"Gamewall placement ID\"></p>\n"
                },
                {
                    "name": "Integration",
                    "text": "<p>To integrate the gamewall placement with your app you simply need to add some content to your manifest file and instantiate the <code>SAGamewall</code> class:</p>\n<p>First, click on <code>Scheme name &amp; API key</code> next to the placement in the dashboard to get the XML to paste into the manifest file; it will look something like this:</p>\n<pre><code>&lt;intent-filter&gt;\n&lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt;\n&lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;\n&lt;category android:name=&quot;android.intent.category.BROWSABLE&quot;/&gt;\n&lt;data android:scheme=&quot;schemeName&quot; android:host=&quot;publisher&quot;/&gt;\n&lt;/intent-filter&gt;\n</code></pre><p>Paste the code into your manifest file under the activity you wish to display the gamewall in. Then you just need to instantiate the <code>SAGamewall</code> class somewhere inside the code for that activity:</p>\n<pre><code>gamewall = new SAGamewall(this, gamewallListener, &quot;PLACEMENT_ID&quot;, &quot;API_KEY&quot;);\n</code></pre><p>SAGamewall takes the following parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>activity</td>\n<td>Activity</td>\n<td>The activity the gamewall is being called from.</td>\n</tr>\n<tr>\n<td>listener</td>\n<td>SAGamewall.Listener</td>\n<td>A listener to add callback events to. Described in more detail below.</td>\n</tr>\n<tr>\n<td>placementID</td>\n<td>String</td>\n<td>The placement ID of the gamewall, as found on the dashboard.</td>\n</tr>\n<tr>\n<td>apiKey</td>\n<td>String</td>\n<td>The API key for the gamewall placement. This is found when you press <code>Scheme name &amp; API key</code> next to the placement in the dashboard.</td>\n</tr>\n</tbody>\n</table>\n"
                },
                {
                    "name": "Advanced Integration",
                    "text": "<p>One of the parameters the gamewall object takes is a listener, which should be implemented and added to the gamewall in order to process rewards and catch other events. An example implementation, with a description of the methods, would be as follows:</p>\n<pre><code>SAGamewall.Listener gamewallListener = new SAGamewall.Listener() {\n    @Override\n    public void onAdError(String message) {\n        // Error trying to retrieve the placement or instantiate the gamewall objects.\n    }\n\n    @Override\n    public void onAdLoaded(SAAd ad) {\n        // Placement has been loaded and is ready to be displayed.\n    }\n\n    @Override\n    public void onGiveReward(int amount) {\n        // &#39;amount&#39; contains the amount of your virtual currency that should be given to the user, based on your currency&#39;s exchange rate.\n        // Retrieve currency so far from preferences and add &amp; save new amount rewarded.\n        int currency = preferences.getInt(&quot;currency&quot;, 0);\n        currency += amount;\n        SharedPreferences.Editor editor = preferences.edit();\n        editor.putInt(&quot;currency&quot;, currency);\n        editor.apply();\n        textAmount.setText(String.valueOf(currency));\n    }\n\n    @Override\n    public void onAvailableChange(boolean available) {\n        // This indicates whether the gamewall has been updated; if &#39;available&#39; is true, there are elements to display and a button is shown to the user to take them to the gamewall.\n        if (available) {\n            // Show button\n            gamewallButton.setVisibility(View.VISIBLE);\n        } else {\n            // Hide button\n            gamewallButton.setVisibility(View.INVISIBLE);\n        }\n    }\n};\n</code></pre><p>In this example the <code>gamewallButton</code> has an <code>onClick</code> event that calls <code>this.gamewall.show();</code>. This method opens the gamewall, though if desired could be called directly in <code>onAvailableChange</code> to show the gamewall instantly.</p>\n"
                }
            ]
        },
        {
            "name": "Parental Gate",
            "text": "<p>Parental gates are used in apps targeted towards kids to prevent them from engaging in commerce or following links out of an app to websites, social networks, or other apps without the knowledge of their parent or guardian. A parental gate presents an adult level task which must be completed in order to continue.</p>\n<p>To enable the parental gate, use the following code in your project:</p>\n<pre><code>AdFragment.isParentalGateEnabled = true;\n</code></pre><p><img src=\"img/parental_gate.png\" alt=\"\" title=\"Parental Gate on Android\"></p>\n"
        },
        {
            "name": "Testing Placements",
            "text": "<p>Our SDK has a test mode flag that if set, causes your placements to display our demo ads. This way you can easily test the production and the development version of your app separately. To enable test mode call the following method:</p>\n<pre><code>AdFragment.testMode = true;\n</code></pre><p>We also provide some demo placements that can be used for testing. These placements have a 100% fill rate.</p>\n<table>\n<thead>\n<tr>\n<th>Placement ID</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5687</td>\n<td>320x50 banner</td>\n</tr>\n<tr>\n<td>5692</td>\n<td>320x480 interstitial</td>\n</tr>\n<tr>\n<td>5740</td>\n<td>video</td>\n</tr>\n</tbody>\n</table>\n"
        },
        {
            "name": "Technical Support",
            "text": "<p>If you have any questions or you need technical support, please, do not hesitate to contact us at <a href=\"mailto:devsupport@superawesome.tv\">devsupport@superawesome.tv</a>. We will make every attempt to answer your inquiry as quickly as possible.</p>\n"
        },
        {
            "name": "License",
            "text": "<p>See the LICENSE.txt file for more information.</p>\n"
        }
    ]
}